Fonctionnement des locks

> analyseCI
a	Vérifie que le lock existe
b		Vérifie l'id dans le lock, pour continuer
c			Print le log tant que le lock ne contient pas "Finish"
d			Vide le lock pour finir.

e		Sinon boucle et break par timeout

> pcheckCI
f	Check si un lock existe avant de poursuivre

	> Fonction check_analyseCI en arrière plan
g		Surveille l'arrêt de AnalyseCI
h			Si le lock contient "Remove", fin normale.
->				Suppression du lock
i			Sinon, fin prématurée
				force_stop.sh

j	Créer le lock et y met l'id du test courant.
	Corrige les accès au fichier, pour permettre à AnalyseCI de le modifier.

	Fin du test
k	Remplace l'id par "Finish" dans le lock
l	Attend que analyseCI vide le lock
m		Ou force la fin de la boucle.
n	Met à jour le lock en y écrivant "Remove" (pour check_analyseCI)

> force_stop
	Prend l'id dans le lock
o	Place "Finish" dans le lock, pour forcer l'arrêt par analyseCI
->	Suppression du lock



> Scénarios envisageables

A analyseCI démarre
B pcheckCI démarre
C Test démarre
D test termine
E analyseCI termine
F pcheckCI termine

G analyseCI annulé
H Force_stop

S Lock supprimé

- Scénario de base, comportement normal: A,B,C,D,E,S,F.
	Rien de particulier.

- analyseCI annulé pendant le test.
	A, B, C, f, j	a, b, c		G, g, i		H, o, S, F

- analyseCI annulé avant le test.
	A, G
	Juste un résidus inutile dans le work_list, aucun lock

- Résidus dans le work_list
	A, B, C, f, j	a, b, c		G, g, mauvais id...
		Suppression du job dans le work_list.
		Remplace l'id dans le lock
		H, o, S
		analyseCI n'est pas arrêté, la prochaine boucle reprendra le travail.
